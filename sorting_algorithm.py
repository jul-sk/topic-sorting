
import numpy as np
import matplotlib.pyplot as plt


def paper_assign(input_file, output_file, section_counts, population_size=100,
                 num_iterations=50, repeat_all=50):
    """
        input_file: path the CSV file generated by Google Forms
        output_file: path to the output file that will contained the best assignment found
        section_counts: list of three numbers containing the number of papers in each category
        population_size: number of assignments in a population
        num_iterations: number of selection-mutation interations performed on each population
        repeat_all: numbere of times the entire algorithm is repeated
    """
    num_choices = 5 # number of papers each student has to choose
    
    
    ## Parsing input file
    f = open(input_file, "r")
    R = [] # matrix containing the rank of each paper (columns) assigned by each student (rows)
    names = [] # student names
    fave_cat = []   #paper category
    
    lines = f.readlines()
    papers = np.array([p.replace('[','').replace(']','').strip() \
                       for p in lines[0].split(',')[5:]])
    
    for line in lines[1:]:
        line = line.strip().replace('Choice ', '').replace('"','')
        items = line.split(',')
        for idx, i in enumerate(items):
            if i == '':
                items[idx] = str(num_choices+1)
        names.append(items[1])
        fave_cat.append(items[2:5])
        R.append(items[5:])
    f.close
    
    R = np.array(R, dtype=int)
    # save original ranking info for histogram
    orig_R = R.copy()
    fave_cat = np.array(fave_cat, dtype=int)
    ######################################################################
    
    # array of category rankings to differentiate last-choice papers
    fave_cat_mat = []
    for i, count in enumerate(section_counts):
        fave_cat_mat.append(np.repeat(fave_cat[:,i].reshape((-1,1)), count, axis=1))
    fave_cat_mat = np.concatenate(fave_cat_mat, axis=1)
    
    # adjust original rankings so 6th choice gets diff scores based on category 
    # preference
    orig_R[R==6] += fave_cat_mat[R==6] - 1   
    # add extra penalties for less favorite categories 
    fave_cat_mat[fave_cat_mat==3] = 300
    fave_cat_mat[fave_cat_mat==2] = 9
    R[R==6] += fave_cat_mat[R==6] - 1
    
    def mutate(assign):
        for i in range(5):
            new = np.copy(assign)
            
            a = np.random.randint(len(assign))
            b = np.random.randint(len(assign))
            new[a], new[b] = new[b], new[a]
        
            if compute_cost(new,R) < compute_cost(assign,R):
                return new   
        return new        
            
    def compute_cost(assign, R):
        ranks = R[range(len(R)),assign[:len(R)]]
        cost = np.sum(ranks) + np.max(ranks)
        return cost
    
    def get_ranks(assign, R):
        ranks = R[range(len(R)),assign[:len(R)]]
        return ranks
    
    num_students = len(names)
    num_papers = len(papers)
    best_cost = np.inf 
    best_assignment = []
    
    for rpt in range(repeat_all):
        # generate 50x assignment vectors
        # make sure it's enough to include all papers!!
        
        assign_mat = np.array([np.random.permutation(num_papers) \
                            for i in range(population_size)])          
        
        for i in range(num_iterations):
        
            cost = [compute_cost(assignment,R) for assignment in assign_mat]
            if np.min(cost) < best_cost:    
                best_assignment = assign_mat[np.argmin(cost)]
                best_cost = np.min(cost)
            top_half = assign_mat[np.argsort(cost)][:int(population_size/2)]
            print('best cost = '+str(best_cost))
        
            swap_top = np.array([mutate(assignment) for assignment in top_half])
            
            assign_mat = np.vstack((swap_top, top_half))
    
    output = np.column_stack((names, papers[best_assignment][:len(names)]))
    np.savetxt(output_file,output,'%s',',', header='Student, Paper',\
               comments='')
    bins = np.arange(1,10) - 0.5
    plt.figure(figsize=(14,10))
    colors = ['#f0ff93', 'aquamarine', 'teal', 'xkcd:azure', 'xkcd:indigo', \
              'orangered', 'red', 'xkcd:red']

    _, _, patches = plt.hist(get_ranks(best_assignment, orig_R), bins)
    for i, patch in enumerate(patches):
        patch.set_facecolor(colors[i])

    plt.tick_params(axis='both', which='major', labelsize=15)
    plt.yticks(range(0,num_students,2))
    plt.ylabel('Number of students', fontsize=18)
    plt.autoscale(enable=True,axis='y')
    plt.xticks(range(1,9), ('1','2','3','4','5','1st Choice\nTopic', \
               '2nd Choice\nTopic', '3rd Choice\nTopic'))
    plt.xlim([0.5,8.5])
    plt.xlabel('Rank of assigned paper', fontsize=18)
    plt.show()
if __name__ == '__main__':
   paper_assign('Heiligkreuztal Talk Topics cats.csv', 'testhikhaled.csv', [17,17,16])    
